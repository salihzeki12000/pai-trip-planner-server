https://code.google.com/p/mobilenavi/source/browse/trunk/findPubTransRoute.php?r=21

<?
header('Content-Type: text/html; charset=UTF-8');
include_once "snoopy/Snoopy.class.php";
include_once "JSON.php";
include_once "lib.php";
include_once "Subway.class.php";
$url = "http://map.naver.com/findroute2/findPubTransRoute.nhn?";
$url .= $_SERVER['QUERY_STRING'];
$snoopy = new Snoopy;
$subway = new Subway;
$snoopy->fetch($url);
$json = $snoopy->results;
$json_decode = new Services_JSON();
$data = objectToArray($json_decode->decode($json));

//현재 기준 시각
$curTime = time();
$newData = array();
$result = array();
$totalPath = array();

function addToPath($totalPath, $path)
{
        $i = 0;
        foreach($totalPath as $p)
        {
                if($p[info][totalTime2] > $path[info][totalTime2])
                {
                        $totalPath = array_insert($totalPath, $i, $path);
                        return $totalPath;
                }
                $i++;
        }
        $totalPath[] = $path;
        return $totalPath;
}

if($data[result][path] != null)
{
        foreach($data["result"]["path"] as $path)
        {
                $newPath = array();
                $newPath[pathType] = $path[pathType];
                $newPath[subPath] = array();
                /*
                if($path[pathType] == 2)
                        print_r($path);
                        */

                $totalWaitTime = 0;
                $durationTime = 0;
                //현재 지하철인 경우에만
                if($path["pathType"] >0)
                {
                        $timeOffset = 0;
                        //모든 subpath에 대해서
                        foreach($path["subPath"] as $sp)
                        {


                                //print_r($sp);
                                $v = array();
                                if($sp["trafficType"] == 1)
                                {
                                        $v[line] = $subway->getLineId($sp[lane][name]);
                                        $v[count] = $sp[stationCount];
                                        $startId = $subway->getStationId($sp["startName"], $sp["lane"]["name"]);
                                        $endId = $subway->getStationId($sp["endName"], $sp["lane"]["name"]);
                                        //print "$startId -> $endId <BR>";
                                        $updown = $subway->findUpDown($startId, $endId, $v[count],$v[line]);
                                        $week = $subway->getWeek();
                                        $waitTime = $subway->getWaitingTime($startId, $updown, $week,
                                                $curTime + $timeOffset);//, mktime(14,20,40,3,4,2010));


                                        $arrivalTime = date("H시 i분", $curTime + $timeOffset);

                                        //추가할 대기 시간의 합을 계산
                                        $totalWaitTime += $waitTime;
                                        $timeOffset += ($waitTime*60);

                                        //$updown = $subway->findUpDown($endId, $startId, $sp["stationCount"]);
                                        //print "도착예정 : $arrivalTime 대기시간 : $waitTime 분 / 이동시간: $sp[sectionTime] 분 / $sp[guide] <BR> ";

                                        //대기 시간 추가
                                        $newSp = array();
                                        $newSp[trafficType] = 9;
                                        $newSp[distance] = 0;
                                        $newSp[sectionTime] = $waitTime;
                                        $newSp[guide] = "$arrivalTime 도착, $sp[startName]역에서 대기";
                                        //array_push($newPath, $newSp);
                                        $newPath[subPath][] = $newSp;
                                        //print $trainId."<BR>";
                                }
                                //전체 걸리는 시간 계산
                                $durationTime += $sp[sectionTime];
                                //대기 시간이 추가된 새로운 path를 추가
                                //array_push($newPath, $sp);
                                $arrivalTime = date("H시 i분", $curTime + $timeOffset);
                                $sp[guide] = $arrivalTime . " " . $sp[guide];

                                $timeOffset +=  $sp[sectionTime] * 60;

                                $newPath[subPath][] = $sp;
                        }
                        $sp = array();
                        $sp[trafficType] = 9;
                        $sp[distance] = 0;
                        $sp[guide] = date("H시 i분", $curTime + $timeOffset) . " 도착";
                        $newPath[subPath][] = $sp;

                }
                else
                        $newPath[subPath] = $path[subPath];

                        $newPath[info] = $path[info];

                //전체 걸리는 시간에 총 대기 시간을 더해줌
                $newPath[info][totalTime2] = $durationTime + $totalWaitTime;

                //전체 data에 새로 생성된 최종 path를 더함
                //$newData[result][path][] = $newPath;

                $totalPath = addToPath($totalPath, $newPath);
        }
}

//실시간 빠른길 (택시)
$url =
"http://map.naver.com/findroute2/findCarRoute.nhn?via=&call=route2&output=json&car=0&mileage=13.8&";
$url .= $_SERVER['QUERY_STRING'];
$url .= "&search=2";
$snoopy->fetch($url);
$json = $snoopy->results;
$json_decode = new Services_JSON();
$data = objectToArray($json_decode->decode($json));
$s = $data[summary];
$s[taxi] = number_format($s[taxi]);

$path = array();
$path[info] = array();
$path[info][payment] = $s[taxi];
$path[info][totalTime] = intval($s[totalTime] / 60);
$path[info][totalTime2] = intval($s[totalTime] / 60);
$path[info][totalDistance] = $s[totalDistance];
$path[info][firstStartStation] = "자동차";
$path[info][lastEndStation] = "자동차";
$path[subPath] = array();
$path[subPath][0][trafficType] = 7;
$path[subPath][0][distance] = 0;
$path[subPath][0][sectionTime] = 0;
$path[subPath][0][guide] = date("H시 i분", $curTime). " 출발";
$path[subPath][1][trafficType] = 7;
$path[subPath][1][distance] = $s[totalDistance];
$path[subPath][1][sectionTime] = intval($s[totalTime] / 60);
$path[subPath][1][guide] = date("H시 i분", $curTime). " 자동차 이동";
$path[subPath][1][guide] .= " (택시비 :". $s[taxi]."원)";
$path[subPath][2][trafficType] = 7;
$path[subPath][2][distance] = 0;
$path[subPath][2][guide] = date("H시 i분", $curTime + $s[totalTime]). " 도착";
$totalPath = addToPath($totalPath, $path);





                $sp[guide] = date("H시 i분", $curTime + $timeOffset) . " 도착";


/*
        print "<BR>---original------------<BR>";
        print_r($data);
        print "<BR>---new ---------<BR>";
        print_r($newData);
        print "<BR>---end---------<BR>";
print "<BR><BR>------------------<BR>";
*/
//print_r($newData);
function printPathDetail($path)
{
        $str = "";
        foreach($path[subPath] as $p)
        {
                if($p[trafficType] == -1)
                        continue;
                $t = $p[guide];
                if($p[sectionTime] != null)
                        $t .= " (".$p[sectionTime] . "분)";
                $t .= "<BR>\n";
                if($p[trafficType] == 9)
                        $str .= "<font color=red>$t</font>";
                else
                        $str .= $t;
        }
        return $str;
}
$i = 0;
foreach($totalPath as $p)
{
        print "<div id=path_$i><a href='javascript:togglePathDetail($i)'>".$p[info][firstStartStation]."->".
        $p[info][lastEndStation]." ".$p[info][totalTime2].
        "분 (네이버 : ".$p[info][totalTime]."분)</a>\n";
        print "<div id=path_detail_$i style='display:visible'>".
                printPathDetail($p) . "</div>\n";
        print "</div>\n";
        $i++;
}
?>